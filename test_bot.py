#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
"""

import json
import datetime

# –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def test_database():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    test_reminder = {
        'text': '–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
        'datetime': datetime.datetime.now().isoformat(),
        'repeat': 'daily',
        'days': None,
        'user_id': 123456789
    }
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {json.dumps(test_reminder, indent=2, ensure_ascii=False)}")
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

# –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def test_reminder_logic():
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
    
    now = datetime.datetime.now()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    test_reminders = [
        {
            'name': '–û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è)',
            'repeat': 'none',
            'days': None,
            'datetime': now.isoformat(),
            'active': True
        },
        {
            'name': '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            'repeat': 'daily',
            'days': None,
            'datetime': now.replace(minute=now.minute + 1, second=0, microsecond=0).isoformat(),
            'active': True
        },
        {
            'name': '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ',
            'repeat': 'weekly',
            'days': None,
            'datetime': now.replace(minute=now.minute + 1, second=0, microsecond=0).isoformat(),
            'active': True
        }
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é should_send_reminder
    for reminder in test_reminders:
        reminder_time = datetime.datetime.fromisoformat(reminder['datetime'])
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        should_trigger = False
        
        if reminder['repeat'] == 'none':
            # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
            should_trigger = now.strftime("%Y-%m-%d %H:%M") == reminder_time.strftime("%Y-%m-%d %H:%M")
        
        elif reminder['repeat'] == 'daily':
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            should_trigger = now.time() == reminder_time.time()
        
        elif reminder['repeat'] == 'weekly':
            # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
            should_trigger = now.weekday() == reminder_time.weekday() and now.time() == reminder_time.time()
        
        print(f"üìã {reminder['name']}: {'‚úÖ' if should_trigger else '‚ùå'}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if reminder['repeat'] == 'daily':
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.time()}, –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time.time()}")
        elif reminder['repeat'] == 'weekly':
            print(f"   üìÖ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: {now.weekday()}, –î–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time.weekday()}")
            print(f"   ‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.time()}, –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_time.time()}")

def test_notification_message():
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    test_reminder = {
        'text': '–ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ',
        'user_id': 123456789
    }
    
    user_info = {
        'first_name': '–ò–≤–∞–Ω'
    }
    
    message = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç!</b>

–ü–æ–º–Ω–∏—à—å —Ç–æ —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª "{test_reminder['text']}"? 
–¢–∞–∫ –≤–æ—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞—é —Ç–µ–±–µ, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.

–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è, {user_info['first_name']}! üåü
    """
    
    print("üì® –ü—Ä–∏–º–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    print(message)
    print("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Napominalkin Bot")
    print("=" * 50)
    
    test_database()
    test_reminder_logic()
    test_notification_message()
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Ç–æ–∫–µ–Ω–æ–º –±–æ—Ç–∞: BOT_TOKEN=your_bot_token_here")
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
