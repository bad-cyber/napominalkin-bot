import os
import logging
import asyncio
import json
import datetime
import aioschedule as schedule
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('BOT_TOKEN'), default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PostgreSQL –∏–ª–∏ –¥—Ä—É–≥—É—é –ë–î)
class Database:
    def __init__(self):
        self.reminders_file = 'reminders.json'
        self.users_file = 'users.json'
        self.load_data()
    
    def load_data(self):
        try:
            with open(self.reminders_file, 'r', encoding='utf-8') as f:
                self.reminders = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.reminders = []
        
        try:
            with open(self.users_file, 'r', encoding='utf-8') as f:
                self.users = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            self.users = {}
    
    def save_reminders(self):
        with open(self.reminders_file, 'w', encoding='utf-8') as f:
            json.dump(self.reminders, f, ensure_ascii=False, indent=2)
    
    def save_users(self):
        with open(self.users_file, 'w', encoding='utf-8') as f:
            json.dump(self.users, f, ensure_ascii=False, indent=2)
    
    def add_user(self, user_id, username, first_name):
        if str(user_id) not in self.users:
            self.users[str(user_id)] = {
                'username': username,
                'first_name': first_name,
                'registered_at': datetime.datetime.now().isoformat()
            }
            self.save_users()
    
    def add_reminder(self, reminder_data):
        reminder_data['id'] = len(self.reminders) + 1
        reminder_data['created_at'] = datetime.datetime.now().isoformat()
        reminder_data['active'] = True
        self.reminders.append(reminder_data)
        self.save_reminders()
        return reminder_data
    
    def get_user_reminders(self, user_id):
        return [r for r in self.reminders if r.get('user_id') == user_id and r.get('active', True)]
    
    def delete_reminder(self, reminder_id, user_id):
        self.reminders = [r for r in self.reminders if not (r['id'] == reminder_id and r.get('user_id') == user_id)]
        self.save_reminders()
    
    def toggle_reminder(self, reminder_id, user_id):
        for reminder in self.reminders:
            if reminder['id'] == reminder_id and reminder.get('user_id') == user_id:
                reminder['active'] = not reminder.get('active', True)
                self.save_reminders()
                return reminder['active']
        return None

db = Database()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å Web App –∫–Ω–æ–ø–∫–æ–π
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://bad-cyber.github.io/napominalkin-bot/code.html"))],
            [KeyboardButton(text="üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    
    db.add_user(user_id, username, first_name)
    
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {first_name}!

–Ø ‚Äî –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏–Ω, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!

‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –∫—Ä–∞—Å–∏–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –¥–Ω–∏)
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

üì± –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@dp.message(Command("help"))
@dp.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    help_text = """
ü§ñ <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏–Ω - –ë–æ—Ç –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/my_reminders - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"
2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
3. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
4. –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è!

<b>–¢–∏–ø—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:</b>
‚Ä¢ –û–¥–∏–Ω —Ä–∞–∑ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è
‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ - –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥–Ω–∏ - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏

üí° <i>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</i>
    """
    await message.answer(help_text, parse_mode=ParseMode.HTML)

# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(Command("my_reminders"))
@dp.message(F.text == "üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def show_reminders(message: types.Message):
    user_id = message.from_user.id
    reminders = db.get_user_reminders(user_id)
    
    if not reminders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        return
    
    text = "üìã <b>–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n\n"
    
    for reminder in reminders[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ 10 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
        dt = datetime.datetime.fromisoformat(reminder['datetime'])
        formatted_date = dt.strftime("%d.%m.%Y")
        formatted_time = dt.strftime("%H:%M")
        
        repeat_text = ""
        if reminder['repeat'] == 'daily':
            repeat_text = "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif reminder['repeat'] == 'weekly':
            repeat_text = "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif reminder['repeat'] == 'custom' and reminder.get('days'):
            day_names = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
            days = [day_names[d] for d in reminder['days']]
            repeat_text = f"üìå –ü–æ –¥–Ω—è–º: {', '.join(days)}"
        else:
            repeat_text = "‚è∞ –û–¥–∏–Ω —Ä–∞–∑"
        
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–æ" if reminder.get('active', True) else "‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        
        text += f"""
üìù <b>{reminder['text']}</b>
üìÖ {formatted_date} ‚è∞ {formatted_time}
{repeat_text}
{status}
üîπ ID: {reminder['id']}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        if reminder.get('active', True):
            builder.button(text="‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"toggle_{reminder['id']}")
        else:
            builder.button(text="‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å", callback_data=f"toggle_{reminder['id']}")
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{reminder['id']}")
        builder.adjust(2)
        
        await message.answer(text, parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
        text = ""  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    if len(reminders) > 10:
        await message.answer(f"üìñ –ò –µ—â—ë {len(reminders) - 10} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∫–Ω–æ–ø–æ–∫
@dp.callback_query(F.data.startswith("toggle_"))
async def toggle_reminder(callback: types.CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    new_state = db.toggle_reminder(reminder_id, user_id)
    
    if new_state is not None:
        status = "–∞–∫—Ç–∏–≤–Ω–æ" if new_state else "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        await callback.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {status}!")
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–æ' if new_state else '‚è∏Ô∏è –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}")
    else:
        await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")

@dp.callback_query(F.data.startswith("delete_"))
async def delete_reminder(callback: types.CallbackQuery):
    reminder_id = int(callback.data.split("_")[1])
    user_id = callback.from_user.id
    
    db.delete_reminder(reminder_id, user_id)
    
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("üóëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º user_id –∫ –¥–∞–Ω–Ω—ã–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        data['user_id'] = user_id
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        reminder_datetime = datetime.datetime.fromisoformat(data['datetime'].replace('Z', '+00:00'))
        data['datetime'] = reminder_datetime.isoformat()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É
        reminder = db.add_reminder(data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        dt = reminder_datetime
        formatted_date = dt.strftime("%d.%m.%Y")
        formatted_time = dt.strftime("%H:%M")
        
        repeat_text = ""
        if data['repeat'] == 'daily':
            repeat_text = "üîÑ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
        elif data['repeat'] == 'weekly':
            repeat_text = "üìÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
        elif data['repeat'] == 'custom' and data.get('days'):
            day_names = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±']
            days = [day_names[d] for d in data['days']]
            repeat_text = f"üìå –ü–æ –¥–Ω—è–º: {', '.join(days)}"
        else:
            repeat_text = "‚è∞ –û–¥–∏–Ω —Ä–∞–∑"
        
        confirmation_text = f"""
‚úÖ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!</b>

üìù <b>–¢–µ–∫—Å—Ç:</b> {data['text']}
üìÖ <b>–î–∞—Ç–∞:</b> {formatted_date}
‚è∞ <b>–í—Ä–µ–º—è:</b> {formatted_time}
üîÑ <b>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ:</b> {repeat_text}

üí° –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!
        """
        
        await message.answer(confirmation_text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"Error processing web app data: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    now = datetime.datetime.now()
    
    for reminder in db.reminders:
        if not reminder.get('active', True):
            continue
            
        reminder_time = datetime.datetime.fromisoformat(reminder['datetime'])
        user_id = reminder.get('user_id')
        
        if should_send_reminder(now, reminder_time, reminder):
            await send_reminder_notification(user_id, reminder)
            
            # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            if reminder.get('repeat') == 'none':
                reminder['active'] = False
                db.save_reminders()

def should_send_reminder(now, reminder_time, reminder):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    if reminder.get('repeat') == 'none':
        # –î–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è
        return now.strftime("%Y-%m-%d %H:%M") == reminder_time.strftime("%Y-%m-%d %H:%M")
    
    elif reminder.get('repeat') == 'daily':
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        return now.time() == reminder_time.time()
    
    elif reminder.get('repeat') == 'weekly':
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
        return now.weekday() == reminder_time.weekday() and now.time() == reminder_time.time()
    
    elif reminder.get('repeat') == 'custom' and reminder.get('days'):
        # –í—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–Ω–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è
        return now.weekday() in reminder['days'] and now.time() == reminder_time.time()
    
    return False

async def send_reminder_notification(user_id, reminder):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
    try:
        user = db.users.get(str(user_id), {})
        username = user.get('first_name', '–î—Ä—É–≥')
        
        message_text = f"""
üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏–Ω –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç!</b>

–ü–æ–º–Ω–∏—à—å —Ç–æ —á—Ç–æ —Ç—ã —É–∫–∞–∑–∞–ª "{reminder['text']}"? 
–¢–∞–∫ –≤–æ—Ç, –Ω–∞–ø–æ–º–∏–Ω–∞—é —Ç–µ–±–µ, —á—Ç–æ —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.

–•–æ—Ä–æ—à–µ–≥–æ —Ç–µ–±–µ –¥–Ω—è, {username}! üåü
        """
        
        await bot.send_message(user_id, message_text, parse_mode=ParseMode.HTML)
        logger.info(f"Sent reminder to user {user_id}: {reminder['text']}")
        
    except Exception as e:
        logger.error(f"Error sending reminder to user {user_id}: {e}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    schedule.every().minute.do(check_reminders)
    
    while True:
        await schedule.run_pending()
        await asyncio.sleep(1)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting Napominalkin Bot...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(scheduler())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
